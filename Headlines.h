#ifndef HEADLINES_H
#define HEADLINES_H

#include <iostream>


void textHauptMenue()
{
    std::cout << "\033[94m __  __                                  __                                                                                            \n";                                                 
    std::cout << "/\\ \\/\\ \\                                /\\ \\__                                                                                           \n";                                                 
    std::cout << "\\ \\ \\_\\ \\      __      __  __   _____   \\ \\ ,_\\    ___ ___       __     ___     __  __     __                                          \n";   
    std::cout << " \\ \\  _  \\   /'__`\\   /\\ \\/\\ \\ /\\ '__`\\  \\ \\ \\/  /' __` __`\\   /'__`\\  /'_ `\\  /\\ \\/\\ \\  /'__`\\                           \n";
    std::cout << "  \\ \\ \\ \\ \\ /\\ \\L\\.\\_ \\ \\ \\_\\ \\ \\\\ \\L\\ \\  \\ \\ \\_\\ \\ \\/\\ \\/\\ \\ /\\  __/ /\\ \\/\\ \\ \\ \\ \\_\\ \\/\\  __/        \n";
    std::cout << "   \\ \\_\\ \\_\\\\ \\__/.\\_\\ \\ \\____/ \\ \\ ,__/   \\ \\__\\\\ \\_\\ \\_\\ \\_\\\\ \\____\\\\ \\_\\ \\_\\ \\ \\____/\\ \\____\\           \n";
    std::cout << "    \\/_/\\/_/ \\/__/\\/_/  \\/___/   \\ \\ \\/     \\/__/ \\/_/\\/_/\\/_/ \\/____/ \\/_/\\/_/  \\/___/  \\/____/                              \n";
    std::cout << "                                  \\ \\_\\                                                                                                     \n";                                                     
    std::cout << "                                   \\/_/                                                                                               \n \033[0m"; 
    return;
}

void textCharacter()
{
    std::cout << "\033[36m _____     __                                   __        __                                               \n";                     
    std::cout << "/\\  _ `\\  /\\ \\                                 /\\ \\      /\\ \\__                                            \n";                  
    std::cout << "\\ \\ \\/\\_\\ \\ \\ \\___       __      _ __     __   \\ \\ \\/'\\  \\ \\ ,_\\     __    _ __                     \n";  
    std::cout << " \\ \\ \\/_/_ \\ \\  _ `\\   /'__`\\   /\\`'__\\ /'__`\\  \\ \\ , <   \\ \\ \\/   /'__`\\ /\\`'__\\                \n";
    std::cout << "  \\ \\ \\L\\ \\ \\ \\ \\ \\ \\ /\\ \\L\\.\\_ \\ \\ \\/ /\\ \\L\\.\\_ \\ \\ \\ \\`\\ \\ \\ \\_ /\\  __/ \\ \\ \\/  \n";  
    std::cout << "   \\ \\____/  \\ \\_\\ \\_\\\\ \\__/.\\_\\ \\ \\_\\ \\ \\__/.\\_\\ \\ \\_\\ \\_\\ \\ \\__\\\\ \\____\\ \\ \\_\\   \n";
    std::cout << "    \\/___/    \\/_/\\/_/ \\/__/\\/_/  \\/_/  \\/__/\\/_/  \\/_/\\/_/  \\/__/ \\/____/  \\/_/                 \033[0m";
    return;
}

void textLevelUp()
{
    std::cout << "\033[36m __                                 ___          __  __               __                            \n";
    std::cout << "/\\ \\                               /\\_ \\        /\\ \\/\\ \\             /\\ \\                         \n";
    std::cout << "\\ \\ \\         __    __  __     __  \\//\\ \\       \\ \\ \\ \\ \\    _____   \\ \\ \\                    \n";
    std::cout << " \\ \\ \\  __  /'__`\\ /\\ \\/\\ \\  /'__`\\  \\ \\ \\       \\ \\ \\ \\ \\  /\\ '__`\\  \\ \\ \\           \n";
    std::cout << "  \\ \\ \\L\\ \\/\\  __/ \\ \\ \\_/ |/\\  __/   \\_\\ \\_      \\ \\ \\_\\ \\ \\ \\ \\L\\ \\  \\ \\_\\      \n";
    std::cout << "   \\ \\____/\\ \\____\\ \\ \\___/ \\ \\____\\  /\\____\\      \\ \\_____\\ \\ \\ ,__/   \\/\\_\\           \n";
    std::cout << "    \\/___/  \\/____/  \\/__/   \\/____/  \\/____/       \\/_____/  \\ \\ \\/     \\/_/                     \n";
    std::cout << "                                                               \\ \\_\\                                     \n";
    std::cout << "                                                                \\/_/                               \033[0m \n";
    return;
}

void textExpUp()
{
    std::cout << "\033[36m ____     __   __    ____           __  __                                 \n";             
    std::cout << "/\\  _`\\  /\\ \\ /\\ \\  /\\  _`\\        /\\ \\/\\ \\                            \n";           
    std::cout << "\\ \\ \\__  \\ `\\`\\/'/' \\ \\ \\L\\ \\      \\ \\ \\ \\ \\    _____              \n";  
    std::cout << " \\ \\  _\\  `\\/ > <    \\ \\ ,__/       \\ \\ \\ \\ \\  /\\ '__`\\               \n";
    std::cout << "  \\ \\ \\____ \\/'/\\`\\   \\ \\ \\/         \\ \\ \\_\\ \\ \\ \\ \\L\\ \\        \n";
    std::cout << "   \\ \\____/ /\\_\\  \\_\\  \\ \\_\\          \\ \\_____\\ \\ \\ ,__/             \n";
    std::cout << "    \\/___/  \\/_/ \\/_/   \\/_/           \\/_____/  \\ \\ \\/                    \n";
    std::cout << "                                                  \\ \\_\\                         \n"; 
    std::cout << "                                                   \\/_/                    \n\033[0m";
    return;
}

void textKampf()
{
    std::cout << "\033[36m __  __                                        ___                      \n";  
    std::cout << "/\\ \\/\\ \\                                     /'___\\                        \n"; 
    std::cout << "\\ \\ \\/'/'      __       ___ ___     _____   /\\ \\__/                        \n";
    std::cout << " \\ \\ , <     /'__`\\   /' __` __`\\  /\\ '__`\\ \\ \\ ,__\\                   \n";
    std::cout << "  \\ \\ \\`\\  /\\ \\L\\.\\_ /\\ \\/\\ \\/\\ \\ \\ \\ \\L\\ \\ \\ \\ \\_/       \n";
    std::cout << "   \\ \\_\\ \\_\\ \\__/.\\_\\ \\_\\ \\_\\ \\_\\ \\ \\ ,__/  \\ \\_\\            \n";
    std::cout << "    \\/_/\\/_/ \\/__/\\/_/ \\/_/\\/_/\\/_/  \\ \\ \\/    \\/_/                  \n";
    std::cout << "                                      \\ \\_\\                                  \n";
    std::cout << "                                       \\/_/                            \033[0m \n";
    return;
}

void textInventar()
{
    std::cout << "\033[36m ______                                       __                                            \n";   
    std::cout << "/\\__  _\\                                     /\\ \\__                                             \n";   
    std::cout << "\\/_/\\ \\/      ___     __  __     __     ___  \\ \\ ,_\\     __      _ __                         \n";  
    std::cout << "   \\ \\ \\    /' _ `\\  /\\ \\/\\ \\  /'__`\\ /' _ `\\ \\ \\ \\/   /'__`\\   /\\`'__\\             \n";
    std::cout << "    \\_\\ \\__ /\\ \\/\\ \\ \\ \\ \\_/ |/\\  __/ /\\ \\/\\ \\ \\ \\ \\_ /\\ \\L\\.\\_ \\ \\ \\/     \n";
    std::cout << "    /\\_____\\\\ \\_\\ \\_\\ \\ \\___/ \\ \\____\\ \\_\\ \\_\\ \\ \\__\\ \\__/.\\_\\ \\ \\_\\       \n";
    std::cout << "    \\/_____/ \\/_/\\/_/  \\/__/   \\/____/ \\/_/\\/_/  \\/__/ \\/__/\\/_/  \\/_/           \033[0m \n";
    return;
}

void textMagic()
{
    std::cout << "\033[36m /'\\_/`\\                      __                           \n";           
    std::cout << "/\\      \\      __        __  /\\_\\      __                        \n";
    std::cout << "\\ \\ \\__\\ \\   /'__`\\    /'_ `\\\\/\\ \\   /'__`\\               \n";
    std::cout << " \\ \\ \\_/\\ \\ /\\ \\L\\.\\_ /\\ \\L\\ \\\\ \\ \\ /\\  __/         \n";
    std::cout << "  \\ \\_\\\\ \\_\\\\ \\__/.\\_\\\\ \\____ \\\\ \\_\\ \\____\\        \n";
    std::cout << "   \\/_/ \\/_/ \\/__/\\/_/ \\/___L\\ \\/_/ \\/____/                  \n";
    std::cout << "                         /\\____/                                    \n";
    std::cout << "                         \\_/__/                             \033[0m \n";
    return;
}

void textSave()
{
    std::cout << "\033[36m ____                                                 \n";
    std::cout << "/\\  _`\\                                                     \n";
    std::cout << "\\ \\,\\L\\_\\      __      __  __     __                     \n";
    std::cout << " \\/_\\__ \\    /'__`\\   /\\ \\/\\ \\  /'__`\\               \n";
    std::cout << "   /\\ \\L\\ \\ /\\ \\L\\.\\_ \\ \\ \\_/ |/\\  __/            \n";
    std::cout << "   \\ `\\____\\ \\__/.\\_\\ \\ \\___/ \\ \\____\\             \n";
    std::cout << "    \\/_____/ \\/__/\\/_/  \\/__/   \\/____/           \033[0m\n";
    return;
}

void textLoad()
{
    std::cout << "\033[94m __                            __                                                             \n";
    std::cout << "/\\ \\                          /\\ \\    __                                                          \n";
    std::cout << "\\ \\ \\        ___      __      \\_\\ \\  /\\_\\     ___       __                                    \n";
    std::cout << " \\ \\ \\  __  / __`\\  /'__`\\    /'_` \\ \\/\\ \\  /' _ `\\   /'_ `\\                               \n";
    std::cout << "  \\ \\ \\L\\ \\/\\ \\L\\ \\/\\ \\L\\.\\_ /\\ \\L\\ \\ \\ \\ \\ /\\ \\/\\ \\ /\\ \\L\\ \\             \n";
    std::cout << "   \\ \\____/\\ \\____/\\ \\__/.\\_\\\\ \\___,_\\ \\ \\_\\\\ \\_\\ \\_\\\\ \\____ \\                  \n";
    std::cout << "    \\/___/  \\/___/  \\/__/\\/_/ \\/__,_ /  \\/_/ \\/_/\\/_/ \\/___L\\ \\                            \n";  
    std::cout << "                                                         /\\____/                                     \n";
    std::cout << "                                                         \\_/__/                               \033[0m\n";
    return;
}

void textMenue()
{
    std::cout << "\033[36m /'\\_/`\\                                                         ";
    std::cout << "/\\      \\      __     ___     __  __     __                              ";
    std::cout << "\\ \\ \\__\\ \\   /'__`\\ /' _ `\\  /\\ \\/\\ \\  /'__`\\                  ";
    std::cout << " \\ \\ \\_/\\ \\ /\\  __/ /\\ \\/\\ \\ \\ \\ \\_\\ \\/\\  __/              ";
    std::cout << "  \\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\ \\____/\\ \\____\\                ";
    std::cout << "   \\/_/ \\/_/ \\/____/ \\/_/\\/_/  \\/___/  \\/____/             \033[0m\n";
    return;
}

void textEnd()
{
    std::cout << "                                                    ########                      \n";
    std::cout << "######################                              #::::::#                      \n";                    
    std::cout << "#::::::::::::::::::::#                              #::::::#                      \n";
    std::cout << "#::::::::::::::::::::#                              #::::::#                      \n";
    std::cout << "##::::::#########::::#                              #:::::#                       \n";
    std::cout << "  #:::::#       ###### ###  ########        #########:::::#     #############     \n";    
    std::cout << "  #:::::#             #:::##::::::::##    ##::::::::::::::#   ##::::::::::::##    \n";  
    std::cout << "  #::::::##########   #::::::::::::::##  #::::::::::::::::#  #::::::####:::::##   \n";
    std::cout << "  #:::::::::::::::#   ##:::::::::::::::##:::::::#####:::::# #::::::#     #:::::#  \n";
    std::cout << "  #:::::::::::::::#     #:::::####:::::##::::::#    #:::::# #:::::::#####::::::#  \n";
    std::cout << "  #::::::##########     #::::#    #::::##:::::#     #:::::# #:::::::::::::::::#   \n"; 
    std::cout << "  #:::::#               #::::#    #::::##:::::#     #:::::# #::::::###########    \n";  
    std::cout << "  #:::::#       ######  #::::#    #::::##:::::#     #:::::# #:::::::#             \n";           
    std::cout << "##::::::########:::::#  #::::#    #::::##::::::#####::::::###::::::::#            \n";          
    std::cout << "#::::::::::::::::::::#  #::::#    #::::# #:::::::::::::::::# #::::::::########    \n";  
    std::cout << "#::::::::::::::::::::#  #::::#    #::::#  #:::::::::###::::#  ##:::::::::::::#    \n";  
    std::cout << "######################  ######    ######   #########   #####    ##############    \n";
    std::cout << "\n\nHaben Sie noch einen schoenen Tag :)                                          \n";
    return;
}

void textDeath()
{
    std::cout << "              ####                                                                                   \n";
    std::cout << "            ########                   --------------------------------------------------------------\n";
    std::cout << "           ##########                  ---              Leider wurden Sie getoetet!               ---\n";
    std::cout << "           ##########                  --------------------------------------------------------------\n";
    std::cout << "             ######                    ---   Oger, Goblins, Orks, Imps und Gewürm fallen ueber    ---\n";
    std::cout << "         ooo ###### ooo                --- Ihren kalten Leichnam her und was noch von Ihnen uebrig---\n";
    std::cout << "           o ###### o                  ---   geblieben ist wird von Ihren Gegnern verwurstet und  ---\n";
    std::cout << "    ####  oo ###### oo  ####           --- abgehangen, um es auch später noch genießen zu koennen!---\n";
    std::cout << "   #####     ######     #####          ---  Wenigstens haben Sie sich als gute Wurst einen Namen  ---\n";
    std::cout << " ##############################        ---                        gemacht!                        ---\n"; 
    std::cout << " ##############################        --------------------------------------------------------------\n";
    std::cout << "   ##########################                                                                        \n";
    std::cout << "    ####     ######     ####           --------------------------------------------------------------\n";
    std::cout << "             ######                    ---                        Statistik                       ---\n";
    std::cout << "      ooooo  ######  ooooo             --------------------------------------------------------------\n";
    std::cout << "         oo  ######  oo                --- Spieler Level ------->                                 ---\n";
    std::cout << "          o  ######  o                 --- Besuchte Raeume ----->                                 ---\n";
    std::cout << "          o  ######  o                 --- Erbeutetes Gold ----->                                 ---\n";
    std::cout << "        ooo  ######  ooo               --- Gecraftets Items ---->                                 ---\n";
    std::cout << "             ######                    --- Getoetete Monster --->                                 ---\n";
    std::cout << "             ######                    --- Getoetete Bosse ----->                                 ---\n";
    std::cout << "           ##########                  --------------------------------------------------------------\n";
    std::cout << "           ##########                  ---       Moechten Sie einen Spielstand laden (J/N)?       ---\n";
    std::cout << "            ########                   --------------------------------------------------------------\n";
    std::cout << "              ####                                                                                   \n";
    return;
}

#endif